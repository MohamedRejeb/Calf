{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Calf - Compose Adaptive Look &amp; Feel","text":"<p>Calf is a library that allows you to easily create adaptive UIs and access platform specific APIs from your Compose Multiplatform apps.</p> <p> </p> <p></p> <p>Calf stands for Compose Adaptive Look &amp; Feel</p>"},{"location":"#artifacts","title":"Artifacts","text":"Artifact Description Platforms Version calf-ui Adaptive UI components Android, iOS, Desktop, Web(Js, Wasm) calf-file-picker Native File Picker wrapper Android, iOS, Desktop, Web(Js, Wasm) calf-webview WebView component Android, iOS, Desktop calf-permissions API that allows you to handle permissions Android, iOS calf-geo API that allows you to access geolocation Coming soon... \ud83d\udea7 \ud83d\udea7 Coming soon... \ud83d\udea7 \ud83d\udea7 calf-navigation Native navigation wrapper Coming soon... \ud83d\udea7 \ud83d\udea7 Coming soon... \ud83d\udea7 \ud83d\udea7 calf-map Native Maps wrapper Coming soon... \ud83d\udea7 \ud83d\udea7 Coming soon... \ud83d\udea7 \ud83d\udea7 calf-media Video/Audio player Coming soon... \ud83d\udea7 \ud83d\udea7 Coming soon... \ud83d\udea7 \ud83d\udea7 calf-notification Notification manager Coming soon... \ud83d\udea7 \ud83d\udea7 Coming soon... \ud83d\udea7 \ud83d\udea7 calf-sf-symbols Apple SF Symbols icons Coming soon... \ud83d\udea7 \ud83d\udea7 Coming soon... \ud83d\udea7 \ud83d\udea7 <p>The main focus for now is Android and iOS, but more Desktop components are coming that allows you to create adaptive UIs for Desktop as well (Windows, macOS, Linux)</p>"},{"location":"#web-demo","title":"Web Demo","text":"<p>You can try the web demo here</p>"},{"location":"#contribution","title":"Contribution","text":"<p>If you've found an error in this sample, please file an issue.  Feel free to help out by sending a pull request .</p> <p>Code of Conduct</p>"},{"location":"#find-this-library-useful","title":"Find this library useful?","text":"<p>Support it by joining stargazers for this repository.   Also, follow me on GitHub for more libraries! \ud83e\udd29</p> <p>You can always </p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2023 Mohamed Rejeb\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at colin at colinwhite.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"filepicker/","title":"File Picker","text":""},{"location":"filepicker/#installation","title":"Installation","text":"<p>Add the following dependency to your module <code>build.gradle.kts</code> file:</p> <pre><code>implementation(\"com.mohamedrejeb.calf:calf-file-picker:0.8.0\")\n</code></pre>"},{"location":"filepicker/#usage","title":"Usage","text":"<p>Calf File Picker allows you to pick files from the device storage.</p> Android iOS Desktop Web <pre><code>val scope = rememberCoroutineScope()\nval context = LocalPlatformContext.current\n\nval pickerLauncher = rememberFilePickerLauncher(\n    type = FilePickerFileType.Image,\n    selectionMode = FilePickerSelectionMode.Single,\n    onResult = { files -&gt;\n        scope.launch {\n            files.firstOrNull()?.let { file -&gt;\n                // Do something with the selected file\n                // You can get the ByteArray of the file\n                file.readByteArray(context)\n            }\n        }\n    }\n)\n\nButton(\n    onClick = {\n        pickerLauncher.launch()\n    },\n    modifier = Modifier.padding(16.dp)\n) {\n    Text(\"Open File Picker\")\n}\n</code></pre>"},{"location":"filepicker/#filepickerfiletype","title":"FilePickerFileType","text":"<p><code>FilePickerFileType</code> allows you to specify the type of files you want to pick:</p> <ul> <li><code>FilePickerFileType.Image</code> - Allows you to pick images only</li> <li><code>FilePickerFileType.Video</code> - Allows you to pick videos only</li> <li><code>FilePickerFileType.ImageView</code> - Allows you to pick images and videos only</li> <li><code>FilePickerFileType.Audio</code> - Allows you to pick audio files only</li> <li><code>FilePickerFileType.Document</code> - Allows you to pick documents only</li> <li><code>FilePickerFileType.Text</code> - Allows you to pick text files only</li> <li><code>FilePickerFileType.Pdf</code> - Allows you to pick PDF files only</li> <li><code>FilePickerFileType.All</code> - Allows you to pick all types of files</li> <li><code>FilePickerFileType.Folder</code> - Allows you to pick folders</li> </ul> <p>You can filter files by custom mime types using <code>FilePickerFileType.Custom</code>.</p> <pre><code>val type = FilePickerFileType.Custom(\n    listOf(\"text/plain\")\n)\n</code></pre> <p>You can also filter files by custom extensions using <code>FilePickerFileType.Extension</code>.</p> <pre><code>val type = FilePickerFileType.Extension(\n    listOf(\"txt\")\n)\n</code></pre>"},{"location":"filepicker/#filepickerselectionmode","title":"FilePickerSelectionMode","text":"<p><code>FilePickerSelectionMode</code> allows you to specify the selection mode of the file picker:</p> <ul> <li><code>FilePickerSelectionMode.Single</code> - Allows you to pick a single file</li> <li><code>FilePickerSelectionMode.Multiple</code> - Allows you to pick multiple files</li> </ul>"},{"location":"filepicker/#extensions","title":"Extensions","text":"<ul> <li>Read the <code>ByteArray</code> of the file using the <code>readByteArray</code> extension function:</li> </ul> <pre><code>val context = LocalPlatformContext.current\n\nLaunchedEffect(file) {\n    val byteArray = file.readByteArray(context)\n}\n</code></pre> <p>The <code>readByteArray</code> extension function is a suspending function, so you need to call it from a coroutine scope.</p> <p>It's not recommended to use <code>readByteArray</code> extension function on large files, as it reads the entire file into memory. For large files, it's recommended to use the platform-specific APIs to read the file. You can read more about accessing the platform-specific APIs below.</p> <ul> <li>Check if the file exists using the <code>exists</code> extension function:</li> </ul> <pre><code>val context = LocalPlatformContext.current\n\nval exists = file.exists(context)\n</code></pre> <ul> <li>Get the file name using the <code>getName</code> extension function:</li> </ul> <pre><code>val context = LocalPlatformContext.current\n\nval name = file.getName(context)\n</code></pre> <ul> <li>Get the file path using the <code>getPath</code> extension function:</li> </ul> <pre><code>val context = LocalPlatformContext.current\n\nval path = file.getPath(context)\n</code></pre> <ul> <li>Check if the file is a directory using the <code>isDirectory</code> extension function:</li> </ul> <pre><code>val context = LocalPlatformContext.current\n\nval isDirectory = file.isDirectory(context)\n</code></pre>"},{"location":"filepicker/#platform-specific-apis","title":"Platform-specific APIs","text":"<p>KmpFile is a wrapper around platform-specific APIs, you can access the native APIs for each platform using the following properties:</p>"},{"location":"filepicker/#android","title":"Android","text":"<pre><code>val uri: Uri = kmpFile.uri\n</code></pre>"},{"location":"filepicker/#ios","title":"iOS","text":"<pre><code>val nsUrl: NSURL = kmpFile.url\n</code></pre>"},{"location":"filepicker/#desktop","title":"Desktop","text":"<pre><code>val file: java.io.File = kmpFile.file\n</code></pre>"},{"location":"filepicker/#web","title":"Web","text":"<pre><code>val file: org.w3c.files.File = kmpFile.file\n</code></pre>"},{"location":"filepicker/#coil-etensions","title":"Coil etensions","text":"<p>In case you're using Coil in your project, Calf has a dedicated package that includes utilities to ease the integration between both libraries.</p> <p>You can use it by adding the following dependency to your module <code>build.gradle.kts</code> file:</p> <pre><code>implementation(\"com.mohamedrejeb.calf:calf-file-picker-coil:0.5.1\")  \n</code></pre> <p>Currently, this package contains a <code>KmpFileFetcher</code> that you can use to let Coil know how to load a KmpFile by adding it to Coil's  <code>ImageLoader</code>:</p> <pre><code>ImageLoader.Builder(context)  \n .components { add(KmpFileFetcher.Factory()) }\n .build()  \n</code></pre> <p>For more info regarding how to extend the Image Pipeline in Coil, you can read here.</p>"},{"location":"installation/","title":"Installation","text":"Kotlin version Compose version Calf version 2.1.21 1.8.0 0.8.0 2.1.10 1.7.3 0.7.1 2.1.0 1.7.3 0.7.0 2.0.21 1.7.0 0.6.1 2.0.10 1.6.11 0.5.5 1.9.22 1.6.0 0.4.1 1.9.21 1.5.11 0.3.1 1.9.20 1.5.10 0.2.0 1.9.0 1.5.0 0.1.1 <p>Add the following dependencies to your module <code>build.gradle.kts</code> file:</p> <pre><code>// For Adaptive UI components\napi(\"com.mohamedrejeb.calf:calf-ui:0.8.0\")\n\n// For WebView\nimplementation(\"com.mohamedrejeb.calf:calf-webview:0.8.0\")\n\n// For FilePicker\nimplementation(\"com.mohamedrejeb.calf:calf-file-picker:0.8.0\")\n\n// For Permissions\nimplementation(\"com.mohamedrejeb.calf:calf-permissions:0.8.0\")\n</code></pre> <p>If you are using <code>calf-ui</code> artifact, make sure to export it to binaries:</p>"},{"location":"installation/#regular-framewoek","title":"Regular Framewoek","text":"<pre><code>...\nkotlin {\n    ...\n    targets\n        .filterIsInstance&lt;KotlinNativeTarget&gt;()\n        .filter { it.konanTarget.family == Family.IOS }\n        .forEach {\n            it.binaries.framework {\n                ...\n                export(\"com.mohamedrejeb.calf:calf-ui:0.8.0\")\n            }\n        }\n    ...\n}\n...\n</code></pre>"},{"location":"installation/#cocoapods","title":"CocoaPods","text":"<pre><code>...\nkotlin {\n    ...\n    cocoapods {\n        ...\n        framework {\n            ...\n            export(\"com.mohamedrejeb.calf:calf-ui:0.8.0\")\n        }\n    }\n    ...\n}\n...\n</code></pre> <p>Important: Exporting <code>calf-ui</code> to binaries is required to make it work on iOS.</p>"},{"location":"installation/#snapshots","title":"Snapshots","text":"<p>Add the snapshots repository to your list of repositories in <code>build.gradle.kts</code>:</p> <pre><code>allprojects {\n    repositories {\n        maven(\"https://s01.oss.sonatype.org/content/repositories/snapshots\")\n    }\n}\n</code></pre> <p>Or to your dependency resolution management in <code>settings.gradle.kts</code>:</p> <pre><code>dependencyResolutionManagement {\n    repositories {\n        maven(\"https://s01.oss.sonatype.org/content/repositories/snapshots\")\n    }\n}\n</code></pre> <p>Use the snapshot version:</p> <pre><code>api(\"com.mohamedrejeb.calf:calf-ui:0.8.0-SNAPSHOT\")\n</code></pre> <p>Note: Snapshots are deployed for each new commit on <code>main</code> that passes CI. They can potentially contain breaking changes or may be unstable. Use at your own risk.</p>"},{"location":"permissions/","title":"Permissions","text":""},{"location":"permissions/#installation","title":"Installation","text":"<p>Add the following dependency to your module <code>build.gradle.kts</code> file:</p> <pre><code>implementation(\"com.mohamedrejeb.calf:calf-permissions:0.8.0\")\n</code></pre>"},{"location":"permissions/#usage","title":"Usage","text":"<p><code>rememberPermissionState</code> and <code>rememberMultiplePermissionsState</code> APIs</p> <p>The <code>rememberPermissionState(permission: Permission)</code> API allows you to request a certain permission to the user and check for the status of the permission.  <code>rememberMultiplePermissionsState(permissions: List&lt;Permission&gt;)</code> offers the same but for multiple permissions at the same time.</p> <p>You can use the <code>launchPermissionRequest()</code> method to launch the permission request dialog.</p> <p>You can check the status of the permission using the <code>status</code> property of the <code>PermissionState</code> object.</p> <p>example: <code>cameraPermissionState.status.isGranted</code></p> Android iOS <pre><code>// Camera permission state\nval cameraPermissionState = rememberPermissionState(\n    Permission.Camera\n)\n\nif (cameraPermissionState.status.isGranted) {\n    Text(\"Camera permission Granted\")\n} else {\n    Button(\n        onClick = { cameraPermissionState.launchPermissionRequest() }\n    ) {\n        Text(\"Request permission\")\n    }\n}\n</code></pre>"},{"location":"permissions/#permissions_1","title":"Permissions","text":""},{"location":"permissions/#camera-permission","title":"Camera Permission","text":"<p>To request the camera permission, use <code>Permission.Camera</code>.</p>"},{"location":"permissions/#android","title":"Android","text":"<p>On Android you need to add the following permission to your <code>AndroidManifest.xml</code> file:</p> <pre><code>&lt;uses-permission android:name=\"android.permission.CAMERA\" /&gt;\n</code></pre>"},{"location":"permissions/#ios","title":"iOS","text":"<p>On iOS you need to add the following key to your <code>Info.plist</code> file:</p> <pre><code>&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;\n&lt;string&gt;Camera permission is required to take pictures&lt;/string&gt;\n</code></pre> <p>The string value is the message that will be displayed to the user when the permission is requested.</p>"},{"location":"permissions/#gallery-permission","title":"Gallery Permission","text":"<p>To request the gallery permission, use <code>Permission.Gallery</code>.</p>"},{"location":"permissions/#android_1","title":"Android","text":"<p>This permission is always granted on Android.</p>"},{"location":"permissions/#ios_1","title":"iOS","text":"<p>On iOS you need to add the following key to your <code>Info.plist</code> file:</p> <pre><code>&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;\n&lt;string&gt;Gallery permission is required to pick images&lt;/string&gt;\n</code></pre> <p>The string value is the message that will be displayed to the user when the permission is requested.</p>"},{"location":"permissions/#read-storage-permission","title":"Read Storage Permission","text":"<p>To request the read storage permission, use <code>Permission.ReadStorage</code>.</p>"},{"location":"permissions/#android_2","title":"Android","text":"<p>On Android you need to add the following permission to your <code>AndroidManifest.xml</code> file:</p> <pre><code>&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /&gt;\n</code></pre>"},{"location":"permissions/#ios_2","title":"iOS","text":"<p>This permission is always granted on iOS.</p>"},{"location":"permissions/#write-storage-permission","title":"Write Storage Permission","text":"<p>To request the write storage permission, use <code>Permission.WriteStorage</code>.</p>"},{"location":"permissions/#android_3","title":"Android","text":"<p>On Android you need to add the following permission to your <code>AndroidManifest.xml</code> file:</p> <pre><code>&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt;\n&lt;uses-permission android:name=\"android.permission.MANAGE_EXTERNAL_STORAGE\"\n    tools:ignore=\"ScopedStorage\" /&gt;\n</code></pre>"},{"location":"permissions/#ios_3","title":"iOS","text":"<p>This permission is always granted on iOS.</p>"},{"location":"permissions/#location-permission","title":"Location Permission","text":"<p>To request the location permission, use <code>Permission.FineLocation</code> or <code>Permission.CoarseLocation</code>.</p>"},{"location":"permissions/#android_4","title":"Android","text":"<p>On Android you need to add the following permission to your <code>AndroidManifest.xml</code> file:</p> <pre><code>&lt;!-- For fine location --&gt;\n&lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /&gt;\n&lt;!-- For coarse location --&gt;\n&lt;uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" /&gt;\n</code></pre>"},{"location":"permissions/#ios_4","title":"iOS","text":"<p>On iOS you need to add the following key to your <code>Info.plist</code> file:</p> <pre><code>&lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt;\n&lt;string&gt;Location permission is required to get your location&lt;/string&gt;\n</code></pre> <p>The string value is the message that will be displayed to the user when the permission is requested.</p>"},{"location":"permissions/#remote-notification-permission","title":"Remote Notification Permission","text":"<p>To request the remote notification permission, use <code>Permission.RemoteNotification</code>.</p>"},{"location":"permissions/#android_5","title":"Android","text":"<p>This permission is always granted on Android.</p>"},{"location":"permissions/#ios_5","title":"iOS","text":"<p>There is no need to add anything to your <code>Info.plist</code> file to request this permission.</p>"},{"location":"permissions/#record-audio-permission","title":"Record Audio Permission","text":"<p>To request the record audio permission, use <code>Permission.RecordAudio</code>.</p>"},{"location":"permissions/#android_6","title":"Android","text":"<p>On Android you need to add the following permission to your <code>AndroidManifest.xml</code> file:</p> <pre><code>&lt;uses-permission android:name=\"android.permission.RECORD_AUDIO\" /&gt;\n</code></pre>"},{"location":"permissions/#ios_6","title":"iOS","text":"<p>On iOS you need to add the following key to your <code>Info.plist</code> file:</p> <pre><code>&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;\n&lt;string&gt;Record audio permission is required to record audio&lt;/string&gt;\n</code></pre> <p>The string value is the message that will be displayed to the user when the permission is requested.</p>"},{"location":"permissions/#bluetooth-permission","title":"Bluetooth Permission","text":"<p>To request the bluetooth permission, use <code>Permission.BluetoothLe</code> or <code>Permission.BluetoothScan</code> or <code>Permission.BluetoothConnect</code> or <code>Permission.BluetoothAdvertise</code>.</p>"},{"location":"permissions/#android_7","title":"Android","text":"<p>On Android you need to add the following permission to your <code>AndroidManifest.xml</code> file:</p> <pre><code>&lt;!-- For Bluetooth LE --&gt;\n&lt;uses-permission android:name=\"android.permission.BLUETOOTH\" /&gt;\n&lt;!-- For Bluetooth Scan --&gt;\n&lt;uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\" /&gt;\n&lt;!-- For Bluetooth Connect --&gt;\n&lt;uses-permission android:name=\"android.permission.BLUETOOTH_CONNECT\" /&gt;\n&lt;!-- For Bluetooth Advertise --&gt;\n&lt;uses-permission android:name=\"android.permission.BLUETOOTH_ADVERTISE\" /&gt;\n</code></pre>"},{"location":"permissions/#ios_7","title":"iOS","text":"<p>On iOS you need to add the following key to your <code>Info.plist</code> file:</p> <pre><code>&lt;key&gt;NSBluetoothAlwaysUsageDescription&lt;/key&gt;\n&lt;string&gt;Bluetooth permission is required to use Bluetooth&lt;/string&gt;\n</code></pre> <p>The string value is the message that will be displayed to the user when the permission is requested.</p>"},{"location":"permissions/#post-notifications-permission","title":"Post Notifications Permission","text":"<p>To request the post notifications permission, use <code>Permission.Notification</code>.</p>"},{"location":"permissions/#android_8","title":"Android","text":"<p>On Android API version 33 and up, you need to add the following permission to your <code>AndroidManifest.xml</code> file:</p> <pre><code>&lt;!-- For Posting Notifications --&gt;\n&lt;uses-permission android:name=\"android.permission.POST_NOTIFICATIONS\" /&gt;\n</code></pre>"},{"location":"permissions/#ios_8","title":"iOS","text":"<p>On iOS you need to add the following key to your <code>Info.plist</code> file:</p> <pre><code>&lt;key&gt;NSUserNotificationsUsageDescription&lt;/key&gt;\n&lt;string&gt;Notifications permission is required to show notifications&lt;/string&gt;\n</code></pre> <p>The string value is the message that will be displayed to the user when the permission is requested.</p>"},{"location":"permissions/#read-contacts-permission","title":"Read Contacts Permission","text":"<p>To request the read contacts permission, use <code>Permission.ReadContacts</code>.</p>"},{"location":"permissions/#android_9","title":"Android","text":"<p>On Android you need to add the following permission to your <code>AndroidManifest.xml</code> file:</p> <pre><code>&lt;!-- For Read Contacts --&gt;\n&lt;uses-permission android:name=\"android.permission.READ_CONTACTS\" /&gt;\n</code></pre>"},{"location":"permissions/#ios_9","title":"iOS","text":"<p>On iOS you need to add the following key to your <code>Info.plist</code> file:</p> <pre><code>&lt;key&gt;NSContactsUsageDescription&lt;/key&gt;\n&lt;string&gt;Contacts permission is required to access user's contacts&lt;/string&gt;\n</code></pre> <p>The string value is the message that will be displayed to the user when the permission is requested.</p>"},{"location":"ui/","title":"Adaptive UI","text":""},{"location":"ui/#installation","title":"Installation","text":"Kotlin version Compose version Calf version 2.1.21 1.8.0 0.8.0 2.1.10 1.7.3 0.7.1 2.1.0 1.7.3 0.7.0 2.0.21 1.7.0 0.6.1 2.0.10 1.6.11 0.5.5 1.9.22 1.6.0 0.4.1 1.9.21 1.5.11 0.3.1 1.9.20 1.5.10 0.2.0 1.9.0 1.5.0 0.1.1 <p>Add the following dependency to your module <code>build.gradle.kts</code> file:</p> <pre><code>api(\"com.mohamedrejeb.calf:calf-ui:0.8.0\")\n</code></pre> <p>If you are using <code>calf-ui</code> artifact, make sure to export it to binaries:</p>"},{"location":"ui/#regular-framework","title":"Regular Framework","text":"<pre><code>kotlin {\n    targets\n        .filterIsInstance&lt;KotlinNativeTarget&gt;()\n        .filter { it.konanTarget.family == Family.IOS }\n        .forEach {\n            it.binaries.framework {\n                export(\"com.mohamedrejeb.calf:calf-ui:0.8.0\")\n            }\n        }\n}\n</code></pre>"},{"location":"ui/#cocoapods","title":"CocoaPods","text":"<pre><code>kotlin {\n    cocoapods {\n        framework {\n            export(\"com.mohamedrejeb.calf:calf-ui:0.8.0\")\n        }\n    }\n}\n</code></pre> <p>Important: Exporting <code>calf-ui</code> to binaries is required to make it work on iOS.</p>"},{"location":"ui/#components","title":"Components","text":"<p>Calf UI provides a set of adaptive UI components that adapt to the platform they are running on. Here's a list of available components:</p> <ul> <li>AdaptiveAlertDialog - A dialog that adapts to the platform it is running on</li> <li>AdaptiveBottomSheet - A bottom sheet that adapts to the platform it is running on</li> <li>AdaptiveCircularProgressIndicator - A circular progress indicator that adapts to the platform it is running on</li> <li>AdaptiveClickable - A clickable modifier that replaces indication on iOS with scaling effect</li> <li>AdaptiveDatePicker - A date picker that adapts to the platform it is running on</li> <li>AdaptiveTimePicker - A time picker that adapts to the platform it is running on</li> </ul>"},{"location":"webview/","title":"File Picker","text":""},{"location":"webview/#installation","title":"Installation","text":"<p>Add the following dependency to your module <code>build.gradle.kts</code> file:</p> <pre><code>implementation(\"com.mohamedrejeb.calf:calf-webview:0.8.0\")\n</code></pre>"},{"location":"webview/#usage","title":"Usage","text":"<p><code>WebView</code> is a view that adapts to the platform it is running on. It is a wrapper around <code>WebView</code> on Android, <code>WKWebView</code> on iOS and JavaFX <code>WebView</code> on Desktop.</p> Android iOS <pre><code>val state = rememberWebViewState(\n    url = \"https://github.com/MohamedRejeb\"\n)\n\nLaunchedEffect(state.isLoading) {\n    // Get the current loading state\n}\n\nWebView(\n    state = state,\n    modifier = Modifier\n        .fillMaxSize()\n)\n</code></pre>"},{"location":"webview/#web-view-settings","title":"Web View Settings","text":"<p>You can customize the web view settings by changing the <code>WebSettings</code> object in the <code>WebViewState</code>:</p> <pre><code>val state = rememberWebViewState(\n    url = \"https://github.com/MohamedRejeb\"\n)\n\nLaunchedEffect(Unit) {\n    // Enable JavaScript\n    state.settings.javaScriptEnabled = true\n\n    // Enable Zoom in Android\n    state.settings.androidSettings.supportZoom = true\n}\n</code></pre>"},{"location":"webview/#call-javascript","title":"Call JavaScript","text":"<p>You can call JavaScript functions from the web view by using the <code>evaluateJavaScript</code> function:</p> <pre><code>val state = rememberWebViewState(\n    url = \"https://github.com/MohamedRejeb\"\n)\n\nLaunchedEffect(Unit) {\n    val jsCode = \"\"\"\n        document.body.style.backgroundColor = \"red\";\n        document.title\n    \"\"\".trimIndent()\n\n    // Evaluate the JavaScript code\n    state.evaluateJavaScript(jsCode) {\n        // Do something with the result\n        println(\"JS Response: $it\")\n    }\n}\n</code></pre> <p>Note: The <code>evaluateJavaScript</code> method only works when you enable JavaScript in the web view settings.</p>"},{"location":"ui/adaptive-alert-dialog/","title":"AdaptiveAlertDialog","text":"<p>Calf provides two different alert dialog composables that adapt to the platform they're running on:</p> <ol> <li>AdaptiveAlertDialog: A simpler API with predefined confirm and dismiss buttons</li> <li>AdaptiveBasicAlertDialog: A more flexible API that allows fully custom content on Material platforms and advanced configuration on iOS</li> </ol> <p>Both composables use native <code>UIAlertController</code> on iOS and Material dialogs on other platforms (Android, Desktop, Web).</p> Material (Android, Desktop, Web) Cupertino (iOS)"},{"location":"ui/adaptive-alert-dialog/#adaptivealertdialog_1","title":"AdaptiveAlertDialog","text":"<p>The <code>AdaptiveAlertDialog</code> composable provides a simple API with predefined confirm and dismiss buttons. It's ideal for common dialog scenarios where you just need to show a message with two action buttons.</p> <pre><code>// State to control dialog visibility\nvar showDialog by remember { mutableStateOf(false) }\n\n// Button to trigger the dialog\nButton(\n    onClick = { showDialog = true },\n) {\n    Text(\"Show Alert Dialog\")\n}\n\n// Show the dialog when state is true\nif (showDialog) {\n    AdaptiveAlertDialog(\n        onConfirm = { \n            // Handle confirmation\n            showDialog = false \n        },\n        onDismiss = { \n            // Handle dismissal\n            showDialog = false \n        },\n        confirmText = \"OK\",\n        dismissText = \"Cancel\",\n        title = \"Alert Dialog\",\n        text = \"This is a native alert dialog from Calf\",\n        // Optional: Customize iOS dialog style\n        iosDialogStyle = AlertDialogIosStyle.Alert, // or ActionSheet\n        iosConfirmButtonStyle = AlertDialogIosActionStyle.Default,\n        iosDismissButtonStyle = AlertDialogIosActionStyle.Destructive,\n    )\n}\n</code></pre>"},{"location":"ui/adaptive-alert-dialog/#adaptivebasicalertdialog","title":"AdaptiveBasicAlertDialog","text":"<p>The <code>AdaptiveBasicAlertDialog</code> composable provides a more flexible API that allows fully custom content on Material platforms and advanced configuration on iOS through the <code>iosProperties</code> parameter. It's marked with <code>@ExperimentalCalfUiApi</code> annotation.</p> <pre><code>// State to control dialog visibility\nvar showComplexDialog by remember { mutableStateOf(false) }\n\n// Configure iOS-specific properties\nval iosProperties = rememberAlertDialogIosProperties(\n    title = \"Custom Dialog\",\n    text = \"This dialog has custom content\",\n    style = AlertDialogIosStyle.Alert,\n    actions = listOf(\n        AlertDialogIosAction(\n            title = \"OK\",\n            style = AlertDialogIosActionStyle.Default,\n            onClick = { showComplexDialog = false }\n        ),\n        AlertDialogIosAction(\n            title = \"Cancel\",\n            style = AlertDialogIosActionStyle.Cancel,\n            onClick = { showComplexDialog = false }\n        )\n    )\n)\n\n// Show the dialog when state is true\nif (showComplexDialog) {\n    AdaptiveBasicAlertDialog(\n        onDismissRequest = { showComplexDialog = false },\n        iosProperties = iosProperties,\n        materialContent = {\n            // Custom content for Material platforms\n            Surface(\n                shape = RoundedCornerShape(28.dp),\n                color = MaterialTheme.colorScheme.surface,\n                tonalElevation = 6.dp\n            ) {\n                Column(\n                    modifier = Modifier.padding(24.dp),\n                    horizontalAlignment = Alignment.CenterHorizontally\n                ) {\n                    Text(\n                        \"Custom Dialog\",\n                        style = MaterialTheme.typography.headlineSmall\n                    )\n                    Spacer(modifier = Modifier.height(16.dp))\n                    Text(\"This dialog has fully custom content on Material platforms\")\n                    Spacer(modifier = Modifier.height(24.dp))\n                    Row(\n                        modifier = Modifier.fillMaxWidth(),\n                        horizontalArrangement = Arrangement.End\n                    ) {\n                        TextButton(onClick = { showComplexDialog = false }) {\n                            Text(\"Cancel\")\n                        }\n                        Button(onClick = { showComplexDialog = false }) {\n                            Text(\"OK\")\n                        }\n                    }\n                }\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"ui/adaptive-alert-dialog/#ios-action-sheet-style","title":"iOS Action Sheet Style","text":"<p>On iOS, you can display the dialog as an action sheet that slides up from the bottom of the screen:</p> <pre><code>// State to control dialog visibility\nvar showActionSheetDialog by remember { mutableStateOf(false) }\n\n// Configure iOS-specific properties\nval actionSheetProperties = rememberAlertDialogIosProperties(\n    title = \"Choose an Option\",\n    text = \"Select one of the following actions\",\n    style = AlertDialogIosStyle.ActionSheet,\n    actions = listOf(\n        AlertDialogIosAction(\n            title = \"Confirm\",\n            style = AlertDialogIosActionStyle.Default,\n            onClick = { showActionSheetDialog = false }\n        ),\n        AlertDialogIosAction(\n            title = \"Cancel\",\n            style = AlertDialogIosActionStyle.Cancel,\n            onClick = { showActionSheetDialog = false }\n        ),\n        AlertDialogIosAction(\n            title = \"Delete\",\n            style = AlertDialogIosActionStyle.Destructive,\n            onClick = { showActionSheetDialog = false }\n        ),\n    )\n)\n\n// Show the action sheet dialog\nif (showActionSheetDialog) {\n    AdaptiveBasicAlertDialog(\n        onDismissRequest = { showActionSheetDialog = false },\n        iosProperties = actionSheetProperties,\n        materialContent = {\n            // Your custom Material UI content here\n            // This example focuses on iOS action sheet functionality\n        }\n    )\n}\n</code></pre> iOS Action Sheet"},{"location":"ui/adaptive-alert-dialog/#dialog-with-text-fields-ios","title":"Dialog with Text Fields (iOS)","text":"<p>On iOS, you can add text fields to your alert dialog for user input:</p> <pre><code>// State to control dialog visibility\nvar showComplexDialog by remember { mutableStateOf(false) }\n\n// Configure iOS-specific properties with text fields\nval complexProperties = rememberAlertDialogIosProperties(\n    title = \"Login\",\n    text = \"Please enter your credentials\",\n    style = AlertDialogIosStyle.Alert,\n    severity = AlertDialogIosSeverity.Critical,\n    actions = listOf(\n        AlertDialogIosAction(\n            title = \"Login\",\n            style = AlertDialogIosActionStyle.Default,\n            onClick = { showComplexDialog = false }\n        ),\n        AlertDialogIosAction(\n            title = \"Cancel\",\n            style = AlertDialogIosActionStyle.Cancel,\n            onClick = { showComplexDialog = false }\n        )\n    ),\n    textFields = listOf(\n        AlertDialogIosTextField(\n            placeholder = \"Email\",\n            initialValue = \"\",\n            keyboardType = IosKeyboardType.EmailAddress,\n            isSecure = false,\n            onValueChange = { email -&gt; \n                println(\"Email: $email\") \n            }\n        ),\n        AlertDialogIosTextField(\n            placeholder = \"Password\",\n            initialValue = \"\",\n            isSecure = true,\n            onValueChange = { password -&gt; \n                println(\"Password: $password\") \n            }\n        )\n    )\n)\n\n// Show the dialog with text fields\nif (showComplexDialog) {\n    AdaptiveBasicAlertDialog(\n        onDismissRequest = { showComplexDialog = false },\n        iosProperties = complexProperties,\n        materialContent = {\n            // Your custom Material UI content here\n            // This example focuses on iOS text field functionality\n        }\n    )\n}\n</code></pre> iOS Dialog with Text Fields"},{"location":"ui/adaptive-alert-dialog/#customizing-action-styles-ios","title":"Customizing Action Styles (iOS)","text":"<p>You can customize the appearance and behavior of actions in your dialog:</p> <pre><code>// Configure actions with different styles\nval actions = listOf(\n    AlertDialogIosAction(\n        title = \"OK\",\n        style = AlertDialogIosActionStyle.Default,  // Standard button\n        onClick = { /* handle OK */ }\n    ),\n    AlertDialogIosAction(\n        title = \"Cancel\",\n        style = AlertDialogIosActionStyle.Cancel,   // Emphasized cancel button\n        onClick = { /* handle cancel */ }\n    ),\n    AlertDialogIosAction(\n        title = \"Delete\",\n        style = AlertDialogIosActionStyle.Destructive,  // Red destructive button\n        enabled = true,  // Can be disabled with false\n        onClick = { /* handle delete */ }\n    )\n)\n</code></pre>"},{"location":"ui/adaptive-bottom-sheet/","title":"AdaptiveBottomSheet","text":"<p><code>AdaptiveBottomSheet</code> is a bottom sheet that adapts to the platform it is running on. It is a wrapper around <code>ModalBottomSheet</code> on Android and <code>UIModalPresentationPopover</code> on iOS, providing a native bottom sheet experience on each platform.</p> Material (Android, Desktop, Web) Cupertino (iOS)"},{"location":"ui/adaptive-bottom-sheet/#usage","title":"Usage","text":"<p>The <code>AdaptiveBottomSheet</code> is typically used to display additional content or actions without navigating away from the current screen. It slides up from the bottom on Android and appears as a popover on iOS.</p> <pre><code>// Create necessary state and scope\nval scope = rememberCoroutineScope()\nval sheetState = rememberAdaptiveSheetState()\nvar openBottomSheet by remember { mutableStateOf(false) }\n\nBox(\n    modifier = Modifier.fillMaxSize()\n) {\n    // Button to trigger the bottom sheet\n    Button(\n        onClick = { openBottomSheet = true },\n        modifier = Modifier.align(Alignment.Center)\n    ) {\n        Text(\"Show Bottom Sheet\")\n    }\n\n    // Show the bottom sheet when state is true\n    if (openBottomSheet) {\n        AdaptiveBottomSheet(\n            // Called when the user dismisses the sheet\n            onDismissRequest = { openBottomSheet = false },\n            // State object to control the sheet\n            adaptiveSheetState = sheetState,\n            // Optional: Customize the sheet appearance\n            shape = RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp),\n            // Optional: Set the sheet content color\n            containerColor = MaterialTheme.colorScheme.surface,\n        ) {\n            // Content of the bottom sheet\n            Column(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(16.dp),\n                horizontalAlignment = Alignment.CenterHorizontally\n            ) {\n                Text(\n                    \"Bottom Sheet Content\",\n                    style = MaterialTheme.typography.titleLarge,\n                    modifier = Modifier.padding(vertical = 8.dp)\n                )\n\n                Spacer(modifier = Modifier.height(16.dp))\n\n                // Button to close the sheet programmatically\n                Button(\n                    onClick = {\n                        // Hide the sheet with animation\n                        scope.launch { sheetState.hide() }.invokeOnCompletion {\n                            // Update the state after animation completes\n                            if (!sheetState.isVisible) {\n                                openBottomSheet = false\n                            }\n                        }\n                    }\n                ) {\n                    Text(\"Close\")\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"ui/adaptive-circular-progress-indicator/","title":"AdaptiveCircularProgressIndicator","text":"<p><code>AdaptiveCircularProgressIndicator</code> is a circular progress indicator that adapts to the platform it is running on. It is a wrapper around <code>CircularProgressIndicator</code> on Android, and it implements similar look to <code>UIActivityIndicatorView</code> on iOS.</p> Material (Android, Desktop, Web) Cupertino (iOS) <pre><code>AdaptiveCircularProgressIndicator(\n    modifier = Modifier.size(50.dp),\n    color = Color.Red,\n)\n</code></pre>"},{"location":"ui/adaptive-clickable/","title":"AdaptiveClickable","text":"<p><code>.adaptiveClickable</code> is a clickable modifier that adapts to the platform it is running on. On Android, it behaves like the standard <code>.clickable</code> modifier with ripple indication, while on iOS, it replaces the indication with a scaling effect that matches iOS design patterns.</p>"},{"location":"ui/adaptive-clickable/#usage","title":"Usage","text":"<p>Use <code>.adaptiveClickable</code> when you want to provide a platform-specific click interaction: - On Android: Standard Material ripple effect - On iOS: Subtle scaling animation that follows iOS design guidelines</p>"},{"location":"ui/adaptive-clickable/#example","title":"Example","text":"Material (Android, Desktop, Web) Cupertino (iOS) <pre><code>Box(\n    modifier = Modifier\n        .size(100.dp)\n        .background(Color.Red, RoundedCornerShape(8.dp))\n        .adaptiveClickable(\n            // Optional parameters\n            shape = RoundedCornerShape(8.dp),\n            interactionSource = remember { MutableInteractionSource() },\n            indication = rememberRipple(), // Used on Android only\n            enabled = true,\n        ) {\n            // Handle click\n            println(\"Clicked!\")\n        }\n)\n</code></pre>"},{"location":"ui/adaptive-date-picker/","title":"AdaptiveDatePicker","text":"<p><code>AdaptiveDatePicker</code> is a date picker that adapts to the platform it is running on. It is a wrapper around <code>DatePicker</code> on Android and <code>UIDatePicker</code> on iOS, providing a native date selection experience on each platform.</p> Material (Android, Desktop, Web) Cupertino (iOS)"},{"location":"ui/adaptive-date-picker/#usage","title":"Usage","text":"<p>The <code>AdaptiveDatePicker</code> uses a state object to manage and track the selected date. You can observe changes to the selected date through the state.</p> <pre><code>// Create and remember the date picker state\nval state = rememberAdaptiveDatePickerState()\n\n// Optional: Set initial date (default is current date)\nLaunchedEffect(Unit) {\n    state.setSelection(Calendar.getInstance().apply {\n        set(2023, 0, 1) // January 1, 2023\n    }.timeInMillis)\n}\n\n// React to date changes\nLaunchedEffect(state.selectedDateMillis) {\n    val selectedDate = state.selectedDateMillis?.let { millis -&gt;\n        Calendar.getInstance().apply {\n            timeInMillis = millis\n        }\n    }\n\n    // Do something with the selected date\n    selectedDate?.let {\n        val year = it.get(Calendar.YEAR)\n        val month = it.get(Calendar.MONTH) + 1 // Calendar months are 0-based\n        val day = it.get(Calendar.DAY_OF_MONTH)\n        println(\"Selected date: $year-$month-$day\")\n    }\n}\n\n// Display the date picker\nAdaptiveDatePicker(\n    state = state,\n    modifier = Modifier.fillMaxWidth(),\n    // Optional: Customize date constraints\n    dateValidator = { timestamp -&gt;\n        // Example: Only allow dates from today forward\n        timestamp &gt;= Calendar.getInstance().apply {\n            set(Calendar.HOUR_OF_DAY, 0)\n            set(Calendar.MINUTE, 0)\n            set(Calendar.SECOND, 0)\n            set(Calendar.MILLISECOND, 0)\n        }.timeInMillis\n    }\n)\n</code></pre>"},{"location":"ui/adaptive-time-picker/","title":"AdaptiveTimePicker","text":"<p><code>AdaptiveTimePicker</code> is a time picker that adapts to the platform it is running on. It is a wrapper around <code>TimePicker</code> on Android and <code>UIDatePicker</code> (in time mode) on iOS, providing a native time selection experience on each platform.</p> Material (Android, Desktop, Web) Cupertino (iOS)"},{"location":"ui/adaptive-time-picker/#usage","title":"Usage","text":"<p>The <code>AdaptiveTimePicker</code> uses a state object to manage and track the selected time. You can observe changes to the hour and minute through the state.</p> <pre><code>// Create and remember the time picker state\nval state = rememberAdaptiveTimePickerState()\n\n// Optional: Set initial time (default is current time)\nLaunchedEffect(Unit) {\n    state.setHour(14)    // 2 PM\n    state.setMinute(30)  // 30 minutes\n}\n\n// React to time changes\nLaunchedEffect(state.hour, state.minute) {\n    // Format the time\n    val hour = state.hour\n    val minute = state.minute\n    val formattedTime = String.format(\"%02d:%02d\", hour, minute)\n\n    // Do something with the selected time\n    println(\"Selected time: $formattedTime\")\n}\n\n// Display the time picker\nAdaptiveTimePicker(\n    state = state,\n    modifier = Modifier.fillMaxWidth(),\n    // Optional: Configure time picker options\n    is24Hour = true  // Use 24-hour format instead of AM/PM\n)\n</code></pre>"}]}